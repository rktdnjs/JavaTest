
public class Main {
    public static void main(String args[]) {
        /* 연산자(operator) 내용정리
		++ : 증가연산자
        -- : 감소연산자
        i++ : 후위형(값을 쓰고나서 증가)
        ++i : 전위형(값을 쓰기전에 증가) 위아래 둘다 쓰고나서 구문이 끝날때까지 변화된 상태 유지.
        (int)(byte)(float)(long) : 형변환연산자
        이때 형변환연산자에서 표현범위의 순서. 표현범위가 더 넓은쪽으로 형변환된다.
        byte-short/char(다른 범위,2byte)-int(4byte)-long(8byte)-float(4byte)-double(8byte)
        
        사칙연산자에서 나눗셈연산자는 피연산자 중 더 넓은 범위의 형태로 형변환 되어 출력이된다.
        예시로, 10/4 = 2(int형이기 때문이다.)
        10/4f = 2.5(한쪽이 더 큰 float형이어서 나머지 한쪽도 자동형변환되어 계산.)
        
        산술변환의 2가지 규칙.
        1) 두 피연산자의 타입을 같게 일치시키되, 보다 큰 타입으로 일치시킨다.
        2) 피연산자의 타입이 int보다 작은 타입이면 int로 변환된다.
        
        Math.round()를 쓰면 소수점 첫째자리에서 반올림 할 수 있다.
        
        % : 나머지 연산자. 나누고 남은 나머지를 출력해 준다.
        이때 나머지 연산자는 나누는 수로 음수를 허용하는데, 이때 절댓값으로 사용된다.
        
        대소비교 연산자의 경우 두 개의 기호로 이루어진 연산자는 기호의 순서를 바꾸면 안된다. > < >= <= 무조건 '=' 등호가 뒤에.
        등가비교 연산자 == : 두 값이 같으면 true, 다르면 false. =! : 두 값이 다르면 true, 같으면 false
        
        문자열을 비교할 때 등가비교 연산자인 ==를 쓰면 객체까지 같아야 true를 결과로 준다.
        만약 equals() 메서드를 쓰면 객체까진 아니고 내용만 같으면 true를 결과로 준다.
        
        논리 연산자 && : 그리고의 의미를 지니고 있으며, ||보다 우선 계산된다.
        || : 또는의 의미를 지니고 있으며, 둘 중 하나라도 true이면 true를 결과로 얻는다.
        
        논리 부정 연산자 !가 들어가 있으면, 참을 거짓으로, 거짓을 참으로 바꾸어주는 역할을 한다.
        
        조건 연산자의 경우 앞에 조건이들어간 채로 사용이 되는데 예시를 들면 
        result = (x>y)? : x : y; 라는 식에서 조건식이 맞으면 x를 결과로 얻고, 틀리면 y를 결과로 얻는다.
        
        대입 연산자의 경우 우변에는 변수나 식, 상수들이 전부 들어갈 수 있으나 좌변에는 변수외의 리터럴, 상수의 경우에는 들어갈 수 없다.
        
        시프트연산자 : 해당하는 방향에 해당하는 비트수만큼 이동하고, 넘어가는 분량만큼은 삭제함.
        
        */
        System.out.println("operator");
	}
}